#!/usr/bin/env python3
"""
Demo: Mission-Based Directory Organization
==========================================

This script demonstrates the DirectoryOrganizer's ability to create
structured, mission-based directory hierarchies for drone video processing outputs.
"""

import tempfile
from pathlib import Path
from drone_metadata.formatters.base_formatter import FormatterConfig
from drone_metadata.formatters.directory_organizer import DirectoryOrganizer
from drone_metadata.models import MissionType


def create_mock_video_result(filename: str, mission_type: MissionType):
    """Create a mock VideoAnalysisResult for demonstration."""
    class MockVideoMetadata:
        def __init__(self, filename):
            self.filename = filename
            
    class MockMissionData:
        def __init__(self, mission_type):
            self.mission_type = mission_type
            
    class MockResult:
        def __init__(self, filename, mission_type):
            self.video_metadata = MockVideoMetadata(filename)
            self.mission_data = MockMissionData(mission_type)
    
    return MockResult(filename, mission_type)


def create_sample_output_files(output_dir: Path):
    """Create sample output files that would be generated by other formatters."""
    files_created = []
    
    # Sample files for different videos
    sample_files = {
        "DJI_0001.MP4": [
            "DJI_0001.MP4_thumbnail.jpg",
            "DJI_0001.MP4.md", 
            "DJI_0001.MP4_semantic.csv",
            "DJI_0001.MP4_report.html"
        ],
        "DJI_0002.MP4": [
            "DJI_0002.MP4_thumbnail.jpg",
            "DJI_0002.MP4.md",
            "DJI_0002.MP4_semantic.csv"
        ],
        "DJI_0003.MP4": [
            "DJI_0003.MP4_thumbnail.png",
            "DJI_0003.MP4_metadata.json",
            "DJI_0003.MP4_analysis.txt"
        ]
    }
    
    for video, file_list in sample_files.items():
        for filename in file_list:
            file_path = output_dir / filename
            # Create realistic content based on file type
            if filename.endswith('.jpg') or filename.endswith('.png'):
                content = f"[Binary thumbnail data for {video}]"
            elif filename.endswith('.md'):
                content = f"# Video Analysis: {video}\n\n- Duration: 2:30\n- Resolution: 1920x1080\n"
            elif filename.endswith('.csv'):
                content = f"timestamp,altitude,speed\n0,10.5,2.1\n30,15.2,3.4\n"
            elif filename.endswith('.json'):
                content = f'{{"video": "{video}", "processed": true}}'
            elif filename.endswith('.html'):
                content = f"<html><body><h1>Report for {video}</h1></body></html>"
            else:
                content = f"Analysis report for {video}\nGenerated automatically."
            
            file_path.write_text(content, encoding='utf-8')
            files_created.append(file_path)
    
    return files_created


def main():
    """Demonstrate directory organization functionality."""
    print("üóÇÔ∏è  Mission-Based Directory Organization Demo")
    print("=" * 50)
    
    # Create temporary directory for demo
    with tempfile.TemporaryDirectory() as temp_dir:
        output_dir = Path(temp_dir) / "drone_processing_output"
        output_dir.mkdir()
        
        print(f"üìÅ Working in: {output_dir}")
        
        # Create sample output files (simulating other formatters)
        print("\nüìù Creating sample output files...")
        sample_files = create_sample_output_files(output_dir)
        print(f"   Created {len(sample_files)} sample files")
        
        # Create DirectoryOrganizer
        config = FormatterConfig(
            output_directory=str(output_dir),
            create_directories=True,
            overwrite_existing=True
        )
        config.move_files = False  # Copy for demo (preserve originals)
        config.preserve_originals = True
        
        organizer = DirectoryOrganizer(config)
        
        print(f"\nüèóÔ∏è  DirectoryOrganizer initialized")
        print(f"   Move files: {organizer.move_files}")
        print(f"   Preserve originals: {organizer.preserve_originals}")
        
        # Create mock video results with different mission types
        video_results = [
            create_mock_video_result("DJI_0001.MP4", MissionType.BOX),
            create_mock_video_result("DJI_0002.MP4", MissionType.SAFETY),
            create_mock_video_result("DJI_0003.MP4", MissionType.ANGLES),
        ]
        
        print(f"\nüéØ Organizing {len(video_results)} videos by mission type...")
        
        # Organize each video
        all_organized_paths = []
        for result in video_results:
            mission_name = result.mission_data.mission_type.name.lower()
            print(f"   üìπ {result.video_metadata.filename} ‚Üí {mission_name} mission")
            
            organized_paths = organizer.format_single_video(result)
            all_organized_paths.extend(organized_paths)
        
        # Display created directory structure
        print(f"\nüìÇ Directory Structure Created:")
        structure_info = organizer.get_directory_structure()
        
        # Sort directories for nice display
        sorted_dirs = sorted(structure_info.keys())
        for i, dir_path in enumerate(sorted_dirs):
            info = structure_info[dir_path]
            file_count = info.get('file_count', 0)
            
            # Determine tree symbols
            is_last = i == len(sorted_dirs) - 1
            prefix = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "
            
            print(f"   {prefix}{dir_path}/ ({file_count} files)")
        
        # Create a batch to demonstrate batch organization
        class MockBatch:
            def __init__(self, video_results):
                self.video_results = video_results
        
        batch = MockBatch(video_results)
        
        print(f"\nüìä Creating batch organization summary...")
        batch_paths = organizer.format_batch(batch)
        
        # Display batch summary if created
        batch_summary_files = [p for p in batch_paths if 'organization_summary' in str(p)]
        if batch_summary_files:
            summary_path = batch_summary_files[0]
            print(f"   üìã Batch summary: {summary_path.name}")
            
            # Show first few lines of summary
            summary_content = summary_path.read_text(encoding='utf-8')
            lines = summary_content.split('\n')[:10]  # First 10 lines
            print(f"   Preview:")
            for line in lines[:5]:
                print(f"      {line}")
            if len(lines) > 5:
                print(f"      ... ({len(lines)-5} more lines)")
        
        # Display formatter information
        print(f"\n‚öôÔ∏è  Formatter Information:")
        formatter_info = organizer.get_formatter_info()
        
        print(f"   Phase: {formatter_info['phase']}")
        print(f"   Files organized: {formatter_info['statistics']['files_organized']}")
        print(f"   Directories created: {formatter_info['statistics']['directories_created']}")
        
        # Show mission directory mapping
        mission_dirs = formatter_info['directory_structure']['mission_dirs']
        print(f"   Mission directory mapping:")
        for mission, directory in mission_dirs.items():
            print(f"     {mission.upper()}: {directory}/")
        
        # Show final directory tree
        print(f"\nüå≥ Final Directory Tree:")
        print(f"   {output_dir.name}/")
        
        # List actual directories that exist
        for item in sorted(output_dir.iterdir()):
            if item.is_dir():
                print(f"   ‚îú‚îÄ‚îÄ {item.name}/")
                
                # List subdirectories
                subdirs = [sub for sub in item.iterdir() if sub.is_dir()]
                for j, subdir in enumerate(sorted(subdirs)):
                    is_last_sub = j == len(subdirs) - 1
                    sub_prefix = "   ‚îÇ   ‚îî‚îÄ‚îÄ " if is_last_sub else "   ‚îÇ   ‚îú‚îÄ‚îÄ "
                    file_count = len([f for f in subdir.iterdir() if f.is_file()])
                    print(f"{sub_prefix}{subdir.name}/ ({file_count} files)")
        
        print(f"\n‚úÖ Directory organization complete!")
        print(f"   Total organized files: {len(all_organized_paths)}")
        
        # Provide information about what would happen in production
        print(f"\nüí° Production Usage:")
        print(f"   ‚Ä¢ Set move_files=True to move (instead of copy) files")
        print(f"   ‚Ä¢ Set preserve_originals=False to avoid duplicates")
        print(f"   ‚Ä¢ Files are automatically organized by:")
        print(f"     - Mission type (box/, safety/, angles/, etc.)")
        print(f"     - File type (thumbnails/, metadata/, reports/, semantic/)")
        print(f"   ‚Ä¢ Batch summaries track all organization activities")


if __name__ == "__main__":
    main()